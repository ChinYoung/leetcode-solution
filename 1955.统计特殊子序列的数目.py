#
# @lc app=leetcode.cn id=1955 lang=python3
#
# [1955] 统计特殊子序列的数目
#

# @lc code=start
from typing import List


class Solution:
    def countSpecialSubsequences(self, nums: List[int]) -> int:
        self.twoMap = {}
        self.oneMap = {}
        total = 0
        for i in nums:
            if i == 2:
                total += 1
        return self.countThree(nums, total)

    def countThree(self, nums, totalNumTwo):
        # print('count three', nums)
        length = len(nums)
        maxIndex = length - 1
        if length < 3:
            return 0
        index = 0
        zeroCount = 0
        while nums[index] == 0 and index < maxIndex:
            zeroCount += 1
            index += 1
        if zeroCount >=1:
            left = nums[index:]
            zeroPosTotal = pow(2, zeroCount) - 1
            return ((zeroPosTotal + 1) * self.countThree(left, totalNumTwo) + (zeroPosTotal) * self.countTwo(left, totalNumTwo)) % (pow(10, 9) + 7)
        head = nums[0]
        left = nums[1:]
        if head == 2:
            return (self.countThree(left, totalNumTwo - 1)) % (pow(10, 9) + 7)
        return self.countThree(left, totalNumTwo)  % (pow(10, 9) + 7)


    def countTwo(self, nums: List[int], totalNumTwo):
        # print('count two', nums)
        length = len(nums)
        maxIndex = length - 1
        try:
            return self.twoMap[length]
        except KeyError:
            result = 0
            if length >= 2:
                index = 0
                oneCount = 0
                while nums[index] == 1 and index < maxIndex:
                    oneCount += 1
                    index += 1
                head = nums[0]
                if oneCount > 0:
                    left = nums[index:]
                    onePosTotal = pow(2, oneCount) - 1
                    result = (onePosTotal + 1) * self.countTwo(left, totalNumTwo) + onePosTotal * self.countOne(left, totalNumTwo)
                elif head == 2:
                    left = nums[1:]
                    result = self.countTwo(left, totalNumTwo-1)
                else:
                    left = nums[1:]
                    result = self.countTwo(left, totalNumTwo)
            self.twoMap[length] = result
            # print(nums,2, length, result)
            return result

    def countOne(self, nums, totalNumTwo):
        print('count one', nums)
        length = len(nums)
        try:
            return self.oneMap[length]
        except KeyError:
            result = pow(2, totalNumTwo) - 1
            self.oneMap[length] = result
            return result
# @lc code=end

if __name__ == "__main__":
    s = Solution()
    # print(s.countSpecialSubsequences([0,1,2,2]))
    # print(s.countSpecialSubsequences([2,2,0,0]))
    print(s.countSpecialSubsequences([0,0,0,2,0,2,0,2,0,0,0,2,1,1,0,1,1,2,2,0,0,0,1,0,1,0,2,1,0,0,1,0,2,0,0,2,2,1,2,2,1,0,2,2,1,1,0,1,2,2,2,0,2,2,1,1,1,1,2,1,1,2,2,1,1,1,1,1,0,1,1,2,0,1,1,2,2,1,2,1,2,1,2,1,0,0,0,1,0,2,1,2,1,0,1,0,2,2,1,1,0,2,2,0,0,0,0,1,2,1,1,0,2,2,1,2,0,0,0,0,1,1,0,1,0,1,0,0,1,2,1,2,0,2,1,2,0,2,1,1,2,1,0,2,2,2,0,1,2,2,0,1,1,1,0,1,0,0,0,0,2,2,1,1,0,2,0,2,1,1,0,1,0,0,0,1,2,2,1,2,1,1,2,1,0,0,2,0,0,1,2,0,0,2,2,0,2,1,0,1,0,2,1,0,0,1,1,2,0,0,2,2,1,0,0,2,0,0,0,2,1,0,1,1,1,1,1,2,2,0,0,1,2,0,2,0,1,1,0,0,1,2,2,1,2,2,1,2,1,1,2,1,1,1,1,1,0,0,0,1,2,0,1,0,1,2,0,0,1,0,2,1,0,1,2,2,2,1,2,1,2,0,0,1,0,2,1,0,1,2,1,1,2,2,0,0,2,2,0,1,0,2,2,2,2,0,0,2,1,0,2,0,0,2,1,2,2,0,2,0,1,1,0,2,2,1,2,1,2,2,2,1,1,2,0,2,2,1,2,0,1,2,0,2,0,0,0,0,1,2,2,0,1,0,2,1,0,2,1,0,2,1,0,0,1,0,1,0,1,2,1,1,0,2,1,2,0,2,0,1,2,1,2,2,1,1,0,1,0,1,0,1,2,2,2,0,2,1,2,1,1,2,1,0,2,0,2,1,1,0,2,1,1,1,0,1,2,0,2,0,2,2,1,1,0,2,0,2,1,1,1,2,2,2,1,1,1,1,2,1,2,2,0,2,1,1,0,0,0,1,2,1,1,1,0,0,2,2,2,2,0,2,2,2,2,2,0,2,2,2,2,1,1,0,1,1,2,1,2,1,1,0,2,1,2,1,1,0,1,0,1,0,1,2,0,2,1,1,2,1,1,0,2,0,1,0,1,1,2,1,0,1,1,2,1,2,0,1,2,1,1,1,0,0,2,1,2,2,0,0,2,1,2,0,1,2,1,1,2,1,1,0,1,1,0,0,1,1,1,2,1,0,0,1,1,2,2,0,2,1,2,1,0,1,1,2,1,2,1,2,2,2,2,0,0,1,0,0,1,1,0,2,0,0,0,1,2,0,1,0,2,0,2,1,1,2,1,1,1,0,1,2,1,0,0,1,1,0,0,1,0,2,0,2,0,0,0,0,0,1,0,2,1,0,1,0,1,0,0,1,2,2,2,0,2,2,2,0,2,1,0,2,0,0,1,2,2,0,0,0,2,1,2,0,1,2,1,1,1,1,2,0,1,0,1,2,0,2,0,2,2,0,0,1,1,0,0,1,2,0,1,0,0,1,2,2,0,0,0,2,2,1,1,1,0,1,0,1,1,2,2,0,2,0,0,0,1,0,1,0,0,0,0,0,2,0,2,2,0,0,0,1,1,1,0,2,1,0,2,1,1,2,2,2,2,2,1,2,2,2,2,2,2,1,1,0,1,2,2,0,0,1,1,2,2,0,2,0,2,0,1,1,1,1,2,0,1,0,2,1,2,0,1,1,0,0,0,2,1,2,2,1,1,0,0,1,1,2,0,1,1,0,1,0,0,1,2,1,2,2,1,1,0,2,1,1,1,0,0,1,2,1,0,1,2,0,1,2,2,2,2,0,0,0,0,1,0,1,1,0,2,0,2,2,0,0,0,0,2,1,0,1,2,2,2,0,0,1,0,1,2,0,2,0,0,1,0,1,1,2,2,0,1,0,1,2,1,1,0,1,2,1,2,1,2,2,1,0,0,2,0,1,1,1,1,0,0,0,2,2,1,2,2,0,0,0,0,0,1,0,0,1,1,1,0,0,2,0,0,2,2,0,0,1,0,0,2,2,1,2,2,1,2,2,1,1,0,2,2,0,0,0,0,2,1,2,1,0,1,1,2,1,1,0,1,2,1,2,1,2,2,0,2,2,1,2,0,0,2,1,1,0,1,2,2,1,2,1,2,2,1,1,0,1,1,2,1,0,0,0,0,1,1,2,2,2,1,0,2,2,0,0,0,0,2,0,0,1,2,2,0,2,2,2,1,1,1,1,2,2,2,1,2,1,0,2,1,2,0,1,0,2,1,1,2,1,1,1,1,2,0,2,2,0,2,1,0,0,0,1,0,2,2,1,0,1,2,1,1,0,1,2,2,2,0,2,2,1,0,0,0,2,0,1,0,2,1,1,0,1,2,0,1,0,1,0,2,1,1,2,0,2,1,1,1,0,1,0,1,2,0,0,0,2,1,2,0,2,2,0,0,0,2,2,2,0,0,1,1,1,2,1,0,2,0,1,2,0,1,1,2,2,1,1,1,0,2,0,0,2,0,1,1,2,0,1,1,1,2,1,2,1,2,1,0,2,1,0,0,1,1,1,1,1,1,2,2,2,0,2,1,0,1,2,1,1,2,0,0,2,2,1,1,2,0,1,2,2,0,0,0,0,2,1,1,2,1,0,2,2,2,1,0,0,1,2,1,0,1,0,2,2,1,2,0,2,2,1,2,1,1,1,1,1,0,0,0,1,1,1,2,0,0,2,1,0,1,1,1,1,2,1,1,2,2,2,2,1,0,2,0,1,1,1,0,2,0,2,0,0,2,0,0,0,0,2,1,0,2,2,2,2,1,1,1,2,2,2,2,0,0,1,0,0,2,0,0,1,0,0,1,2,0,1,2,1,2,0,0,2,2,0,2,1,0,1,1,1,1,1,0,2,0,1,2,1,2,2,0,2,1,0,0,0,1,2,2,1,0,0,2,2,0,2,1,1,0,0,1,1,2,1,0,1,2,0,0,0,2,0,1,2,1,0,2,1,2,0,0,2,0,1,0,1,1,0,2,2,0,1,1,2,0,2,2,1,0,0,0,2,2,2,2,0,2,2,2,2,0,1,1,1,0,2,1,0,1,0,0,2,1,1,0,1,0,0,1,0,0,2,2,2,2,0,2,2,0,1,2,2,2,1,0,0,1,0,1,1,0,1,2,1,2,2,0,2,1,1,2,2,0,2,0,1,0,0,0,0,1,1,1,1,0,0,2,1,0,0,1,2,2,2,1,0,1,2,0,1,2,0,0,2,2,0,2,0,0,2,2,0,0,0,1,0,1,0,2,2,0,0,0,1,1,1,2,0,1,0,2,2,1,1,0,2,2,1,0,0,0,2,0,1,0,1,1,1,1,2,1,2,1,0,1,1,0,1,0,0,2,1,2,0,0,2,2,0,2,0,0,0,0,1,2,0,0,1,0,1,1,1,0,1,0,1,2,2,2,1,0,2,0,0,2,0,0,1,2,0,0,1,1,0,1,0,1,1,1,1,0,0,0,1,2,2,1,1,0,2,1,2,0,2,2,0,0,0,2,0,0,0,1,0,0,0,2,2,0,1,1,2,0,0,0,1,1,0,2,1,1,0,2,2,1,1,1,2,0,2,2,0,0,0,1,1,2,1,0,2,0,2,1,0,2,2,0,1,1,2,0,0,0,2,2,0,1,2,0,2,1,2,1,2,0,0,2,0,2,0,0,0,1,2,1,0,2,1,0,0,1,0,1,2,0,2,2,1,2,1,1,1,0,0,0,1,1]))

